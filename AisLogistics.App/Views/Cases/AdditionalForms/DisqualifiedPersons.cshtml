@model AisLogistics.App.Models.AdditionalForms.DisqualifiedPersonsModel
@{
     IEnumerable<SelectListItem> FaceApplicant = new List<SelectListItem>
    {
            new("Физическое лицо", "Физическое лицо"),
            new("Юридическое лицо", "Юридическое лицо"),
    };
     IEnumerable<SelectListItem> Info = new List<SelectListItem>
    {
            new("Выдать на руки", "Выдать на руки"),
            new("Направить посредством почтовой связи ", "Направить посредством почтовой связи "),
            new("В форме электронного документа  по электронному адресу", "В форме электронного документа  по электронному адресу"),
    };
    }
<div id="additional-data-content">
    <div class="row g-3">
        <div class="col-8 mx-auto">
        <h6 class="my-2">Сведения о заявителе</h6>
            <div class="row mb-3">
                 <div class="col-4">
                     <select class="select2-nosearch" asp-items="@FaceApplicant" asp-for="FaceApplicant"></select>                
                </div>
            </div>
            <div data-app-1111>
                <div class="row mb-3">
                    <div class="col-sm">
                        <label class="form-label" asp-for="Applicant.LastName">Фамилия</label>
                        <input type="text" asp-for="Applicant.LastName" class="form-control"placeholder="Фамилия">                
                    </div>
                    <div class="col-sm">
                        <label class="form-label" asp-for="Applicant.FirstName">Имя</label>
                        <input type="text" asp-for="Applicant.FirstName" class="form-control"placeholder="Имя">                
                    </div>
                    <div class="col-sm">
                        <label class="form-label" asp-for="Applicant.SecondName">Отчество</label>
                        <input type="text" asp-for="Applicant.SecondName" class="form-control"placeholder="Отчество">                
                    </div>
                    <div class="col-2">
                        <label class="form-label" asp-for="Applicant.BirthDate">Дата рождения</label>
                        <div class="input-group input-group-merge">
                            <span class="input-group-text">
                                <i class="bx bx-calendar"></i>
                            </span>
                           <input asp-for="Applicant.BirthDate" type="text"
                            class="form-control pickdate" placeholder="Дата рождения">
                        </div>
                    </div>
                </div>  
                <h6 class="my-2">Место рождения</h6>
                <div class="row mb-3">
                    <div class="col-sm">
                        <label class="form-label" asp-for="Applicant.PlaceBirth.Region">Субъект РФ</label>
                        <input type="text" asp-for="Applicant.PlaceBirth.Region" class="form-control" placeholder="Субъект РФ">                
                    </div>
                    <div class="col-sm">
                        <label class="form-label" asp-for="Applicant.PlaceBirth.Locality">Город, район, населенный пункт</label>
                        <input type="text" asp-for="Applicant.PlaceBirth.Locality" class="form-control" placeholder="Город, район, населенный пункт">                
                    </div>
                </div>
                <h6 class="my-2">Место жительство</h6>
                <div class="row mb-3">
                    <div class="col-sm">
                        <label class="form-label" asp-for="Applicant.Residence.Region">Субъект РФ</label>
                        <input type="text" asp-for="Applicant.Residence.Region" class="form-control" placeholder="Субъект РФ">                
                    </div>
                    <div class="col-sm">
                        <label class="form-label" asp-for="Applicant.Residence.Locality">Город, район, населенный пункт</label>
                        <input type="text" asp-for="Applicant.Residence.Locality" class="form-control" placeholder="Город, район, населенный пункт">                
                    </div>
                    <div class="col-sm">
                        <label class="form-label" asp-for="Applicant.Residence.Street">Улица</label>
                        <input type="text" asp-for="Applicant.Residence.Street" class="form-control" placeholder="Улица">                
                    </div>
                    <div class="col-sm">
                        <label class="form-label" asp-for="Applicant.Residence.House">Дом</label>
                        <input type="text" asp-for="Applicant.Residence.House" class="form-control"  placeholder="Дом">                
                    </div>
                </div>
            </div>
            <div data-app-2222>
                <div class="row mb-3">
                    <div class="col-12">
                        <label class="form-label" asp-for="Applicant.FullName"> полное наименование</label>
                        <input type="text" asp-for="Applicant.FullName" class="form-control" placeholder="полное наименование">                
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-6">
                        <label class="form-label" asp-for="Applicant.INNLegal">ИНН</label>
                        <input type="text" asp-for="Applicant.INNLegal" class="form-control" placeholder="ИНН">                
                    </div>
                    <div class="col-6">
                        <label class="form-label" asp-for="Applicant.OGRN">ОГРН</label>
                        <input type="text" asp-for="Applicant.OGRN" class="form-control" placeholder="ОГРН">                
                    </div>
                </div>  
            </div>
            <hr/>
            <br/>
            <h6 class="my-2">В лице</h6>
            <div class="row mb-3">
                <div class="col-sm">
                    <label class="form-label" asp-for="InPerson.LastName">Фамилия</label>
                    <input type="text" asp-for="InPerson.LastName" class="form-control" placeholder="Фамилия">
                </div>
                <div class="col-sm">
                    <label class="form-label" asp-for="InPerson.FirstName">Имя</label>
                    <input type="text" asp-for="InPerson.FirstName" class="form-control" placeholder="Имя">
                </div>
                <div class="col-sm">
                    <label class="form-label" asp-for="InPerson.SecondName">Отчество</label>
                    <input type="text" asp-for="InPerson.SecondName" class="form-control" placeholder="Отчество">
                </div>
                <div class="col-2">
                    <label class="form-label" asp-for="InPerson.BirthDate">Дата рождения</label>
                    <div class="input-group input-group-merge">
                        <span class="input-group-text"><i class="bx bx-calendar"></i></span>
                        <input asp-for="InPerson.BirthDate" min="10.10.1922" max="@DateTime.Today.Date"  type="text" class="form-control pickdate" placeholder="Дата рождения">
                    </div>
                </div>
            </div>
            <h6 class="my-2">Место рождения</h6>
            <div class="row mb-3">
                <div class="col-sm">
                    <label class="form-label" asp-for="InPerson.PlaceBirth.Region">Субъект РФ</label>
                    <input type="text" asp-for="InPerson.PlaceBirth.Region" class="form-control" placeholder="Субъект РФ">                
                </div>
                <div class="col-sm">
                    <label class="form-label" asp-for="InPerson.PlaceBirth.Locality">Город, район, сельский населенный пункт</label>
                    <input type="text" asp-for="InPerson.PlaceBirth.Locality" class="form-control" placeholder="Город, район, населенный пункт">                
                </div>
            </div>
            <h6 class="my-2">Место жительство</h6>
            <div class="row mb-3">
                <div class="col-sm">
                    <label class="form-label" asp-for="InPerson.Residence.Region">Субъект РФ</label>
                    <input type="text" asp-for="InPerson.Residence.Region" class="form-control" placeholder="Субъект РФ">                
                </div>
                <div class="col-sm">
                    <label class="form-label" asp-for="InPerson.Residence.Locality">Город, район, населенный пункт</label>
                    <input type="text" asp-for="InPerson.Residence.Locality" class="form-control" placeholder="Город, район, населенный пункт">                
                </div>
                <div class="col-sm">
                    <label class="form-label" asp-for="InPerson.Residence.Street">Улица</label>
                    <input type="text" asp-for="InPerson.Residence.Street" class="form-control" placeholder="Улица">                
                </div>
                <div class="col-sm">
                    <label class="form-label" asp-for="InPerson.Residence.House">Дом</label>
                    <input type="text" asp-for="InPerson.Residence.House" class="form-control" placeholder="Дом">                
                </div>
            </div>
            <br/>
            <hr/>
            <h6 class="my-2">Доверенность</h6>
            <div class="row mb-3">
                <div class="col-6">
                    <label class="form-label" asp-for="DocIssuer">Кем выдан</label>
                    <input type="text" class="form-control" placeholder="Кем выдан" asp-for="DocIssuer">
                </div>
                <div class="col-4">
                    <label class="form-label" asp-for="DocNumber">Номер</label>
                    <input type="text" class="form-control" placeholder="Номер" asp-for="DocNumber">
                </div>
                <div class="col-2">
                    <label class="form-label" asp-for="DocIssueDate">Дата выдачи</label>
                    <div class="input-group input-group-merge">
                        <span class="input-group-text"><i class="bx bx-calendar"></i></span>
                        <input asp-for="DocIssueDate" type="text" class="form-control pickdate" placeholder="Дата выдачи">
                    </div>
                </div>
            </div>
            <hr/>
            <br/>
            <h6 class="my-2">В отношении </h6>
            <div class="row mb-3">
                <div class="col-sm">
                    <label class="form-label" asp-for="RequestedFace.LastName">Фамилия</label>
                    <input type="text" asp-for="RequestedFace.LastName" class="form-control" placeholder="Фамилия">                 
                </div>
                <div class="col-sm">
                    <label class="form-label" asp-for="RequestedFace.FirstName">Имя</label>
                    <input type="text" asp-for="RequestedFace.FirstName" class="form-control" placeholder="Имя">                
                </div>
                <div class="col-sm">
                    <label class="form-label" asp-for="RequestedFace.SecondName">Отчество</label>
                    <input type="text" asp-for="RequestedFace.SecondName" class="form-control" placeholder="Отчество">                
                </div>
                <div class="col-2">
                     <label class="form-label" asp-for="RequestedFace.BirthDate">Дата рождения</label>
                     <div class="input-group input-group-merge">
                        <span class="input-group-text">
                             <i class="bx bx-calendar"></i>
                        </span>
                        <input asp-for="RequestedFace.BirthDate" type="text" class="form-control pickdate" placeholder="Дата рождения">
                    </div>
                </div>
            </div>  
            <h6 class="my-2">Место рождения</h6>
            <div class="row mb-3">
                <div class="col-6">
                    <label class="form-label" asp-for="RequestedFace.PlaceBirth.Region">Субъект РФ</label>
                    <input type="text" asp-for="RequestedFace.PlaceBirth.Region" class="form-control"  placeholder="Субъект РФ">                
                </div>
                <div class="col-6">
                    <label class="form-label" asp-for="RequestedFace.PlaceBirth.Locality">Город, район, населенный пункт</label>
                    <input type="text" asp-for="RequestedFace.PlaceBirth.Locality" class="form-control" placeholder="Город, район, населенный пункт">                
                </div>
            </div>
            <hr/>
            <br/>
            <div class="row mb-3">
                <div class="col-4">
                    <label class="form-label" asp-for="Info">Информирование</label>
                    <select class="select2-nosearch" asp-items="@Info" asp-for="Info"></select>
                </div>
                <div class="col-4">
                    <label class="form-label" asp-for="Email">адрес электронной почты</label>
                    <input type="text" asp-for="Email" class="form-control"  placeholder="адрес электронной почты">                
                </div>
                <div class="col-4">
                    <label class="form-label" asp-for="PostalAddress">почтовый адрес</label>
                    <input type="text" asp-for="PostalAddress" class="form-control" placeholder="почтовый адрес">                
                </div>
            </div>
        </div>
    </div>
</div>
        
<script>
    var additionalForm = $('#additional-data-content');
     $(function() {
        originalBlock.find('[data-original]').each(function(_, item) {
            renameBlock($(item), 100, true);
            visibilityBlock($(item), true, true);
        });

        additionalForm.find('#addAppliedDocument').on('click', () => addForm('appliedDocumentList', 'appliedDocument'));

        additionalForm.find('[data-disabled]').each(function() {
            visibilityBlock($(this), true, true);
        });
                
        let options = { clearIncomplete: true, showMaskOnHover: false };
      
        additionalForm.find(".pickdate").datepicker({
            language: "ru",
            autoclose: true,
        }).inputmask("99.99.9999", options);                

         function select2Init($block) {
            $block.find("select.select2-nosearch").each(function() {
                $(this).select2({
                    minimumResultsForSearch: Infinity
                });
            });

            $block.find("select.select2-search").each(function() {
                $(this).select2({
                });
            });
        }

        function addForm(cloneListId, originalId) { //Динамическое добавление Принимает (Куда Откуда)
            let $cloneList = additionalForm.find(`#${cloneListId}`);
            let $original = originalBlock.find(`#${originalId}`);
            let $cloneBlock = $original.clone(true);
            let indexId = $cloneList.find('[data-clone]').length;
            renameBlock($cloneBlock, indexId);
            blockInit($cloneBlock);
            $cloneList.find("select").each(function() {
                $(this).select2('destroy');
            });
            $cloneList.append($cloneBlock);
            select2Init($cloneList);
        }        

        function blockInit($block) {
            visibilityBlock($block, false, false);

            $block.find("input[type='text']").each(function() {
                $(this).val("");
            });
        }

         (function getDictionaries() {
            let dicts = new Set();
            $('[data-dictionary]').each(function() {
                let $this = $(this);
                let options = $this.data('dictionary');
                if (!dicts.has(options.dictionary)) {
                    dicts.add(options.dictionary);
                    $.post(`/SmevBase/SmevGetDictionary`,
                        {
                            type: options.dictionary
                        },
                        function(dictionary) {
                            if (dictionary.error) return;
                            fillSelect(options.dictionary, dictionary);
                        });
                }
            });
        }());

        function fillSelect(dictName, dictionary) {
            $.each($(`[data-dictionary*='"${dictName}"']`),
                function() {
                    let $this = $(this);
                    let items = dictionary;
                    $this.empty();
                    if (!$this.hasClass('required')) {
                        $this.append(new Option('Не выбрано', ''));
                    }
                    if ($this.is('[data-value-value]')) {
                        items.dictionary.forEach(function(item) {
                            $this.append(new Option(item.value, item.value));
                        });
                    } else {
                        items.dictionary.forEach(function(item) {
                            $this.append(new Option(item.value, item.key));
                        });
                    }

                    if ($this.data('dictionary').default_value) {
                        let defVal = $this.data('dictionary').default_value;
                        if (defVal) {
                            $this.val(defVal).trigger('update');
                            $this.attr('data-def', defVal);
                        }
                    } else {
                        $this.val('').trigger('update');
                    }
                });
        }

    });

    function renameBlock($cloneBlock, indexId, initOriginal = false) {
        if (!initOriginal) {
            $cloneBlock.find('.title').text($cloneBlock.find('.title').text().replace(/\d+/, indexId + 1));
            $cloneBlock.attr("id", `${$cloneBlock.attr("id")}${indexId}`);
            $cloneBlock.attr('data-id', indexId);
            $cloneBlock.attr('data-clone', '');
            $cloneBlock.removeAttr('data-original');
        }

        $cloneBlock.find('input, select, div').each(function() {
            $(this).attr('id', $(this).attr('id')?.replace(/\d+/, indexId));
            if ($(this).is('[name]')) {
                $(this).attr('name', $(this).attr('name').replace(/\d+/, indexId));
            }
        });

        $cloneBlock.find('label').each(function() {
            $(this).attr('for', $(this).attr('for').replace(/\d+/, indexId));
        });
    }

    function blockRemove(el) {
        let $cloneList = $(el).closest('[data-clone-list]');
        el.closest('[data-clone]').remove();
        $cloneList.find('[data-clone]').each(function(index, item) {
            renameBlock($(item), index);
        });
    }

    function visibilityBlock($block, hide, isDisabled) {
        switch (hide) {
            case true:
                $block.hide();
                break;
            case false:
                $block.show();
                break;
        }

        switch (isDisabled) {
            case true:
                $block.find('input, select').each(function() {
                    $(this).prop('disabled', true);
                });
                break;
            case false:
                $block.find('input, select').each(function() {
                    $(this).prop('disabled', false);
                });
                $block.find('[data-disabled]').each(function() {
                    visibilityBlock($(this), true, true);
                });
                break;
        }
    }

    var additionalForm = $('#additional-data-content');

    $(function() {
        additionalForm.find("select.select2-search").each(function() {
            $(this).select2({
                //dropdownParent: $("#mainModal"),
            });
        });

        additionalForm.find("select.select2-nosearch").each(function() {
            $(this).select2({
                minimumResultsForSearch: Infinity,
            });
        });

        let options = { clearIncomplete: true, showMaskOnHover: false };

        additionalForm.find(".pickdate").datepicker({
            language: "ru",
            autoclose: true
        }).inputmask("99.99.9999", options);
        additionalForm.find('[name^="FnsDepartment"]').inputmask("9999", options);
        additionalForm.find('[placeholder="адрес электронной почты"]').inputmask("email", options);
       
        additionalForm.find('[placeholder="ИНН"]').inputmask("9{12}", options);
        additionalForm.find('[placeholder="ОГРН"]').inputmask("9{13}", options);

        additionalForm.find('#FaceApplicant').on('change', function() {
            let $app1111 = $('[data-app-1111]');
            let $app2222 = $('[data-app-2222]');
            switch ($(this).val()) {
                case 'Физическое лицо':
                    $app1111.each(function() {
                        visibilityBlock($(this), false, false);
                    });
                    $app2222.each(function() {
                        visibilityBlock($(this), true, true);
                    });
                    break;
                case 'Юридическое лицо':
                    $app1111.each(function() {
                        visibilityBlock($(this), true, true);
                    });
                    $app2222.each(function() {
                        visibilityBlock($(this), false, false);
                    });
                    break;
            }
        });
        additionalForm.find('#FaceApplicant').trigger('change');

        function visibilityBlock($block, hide, isDisabled) {
            switch (hide) {
                case true:
                    $block.hide();
                    break;
                case false:
                    $block.show();
                    break;
            }

            switch (isDisabled) {
                case true:
                    $block.find('input, select').each(function() {
                        $(this).prop('disabled', true);
                    });
                    break;
                case false:
                    $block.find('input, select').each(function() {
                        $(this).prop('disabled', false);
                    });
                    $block.find('[data-disabled]').each(function() {
                        visibilityBlock($(this), true, true);
                    });
                    break;
            }
        }
        (function getDictionaries() {
            let dicts = new Set();
            $('[data-dictionary]').each(function() {
                let $this = $(this);
                let options = $this.data('dictionary');
                if (!dicts.has(options.dictionary)) {
                    dicts.add(options.dictionary);
                    $.post(`/SmevBase/SmevGetDictionary`,
                        {
                            type: options.dictionary
                        },
                        function(dictionary) {
                            if (dictionary.error) return;
                            fillSelect(options.dictionary, dictionary);
                        });
                }
            });
        }());

        function fillSelect(dictName, dictionary) {
            $.each($(`[data-dictionary*='"${dictName}"']`),
                function() {
                    let $this = $(this);
                    let items = dictionary;
                    $this.empty();
                    if (!$this.hasClass('required')) {
                        $this.append(new Option('Не выбрано', ''));
                    }
                    if ($this.is('[data-value-value]')) {
                        items.dictionary.forEach(function(item) {
                            $this.append(new Option(item.value, item.value));
                        });
                    } else {
                        items.dictionary.forEach(function(item) {
                            $this.append(new Option(item.value, item.key));
                        });
                    }

                    if ($this.data('dictionary').default_value) {
                        let defVal = $this.data('dictionary').default_value;
                        if (defVal) {
                            $this.val(defVal).trigger('update');
                            $this.attr('data-def', defVal);
                        }
                    } else {
                        $this.val('').trigger('update');
                    }
                });
        }
    });
</script>

