@model ViewModelBuilder
@{
    ViewBag.Title = Model.ViewTitle;
    (string providersOptions, string typesOptions, string hashtagOptions) = (ValueTuple<string, string, string>)Model.Model;
}
<style>
    .serviceName{
        font-weight: 400;
        font-size: 12px;
        line-height: 14px;
        letter-spacing: 0.035em;
        color: #172359;
    }
    .officeName{
        font-style: normal;
        font-weight: 400;
        font-size: 12px;
        line-height: 14px;
        letter-spacing: 0.035em;
        color: #B5B5B5;
    }

    .name{
        font-weight: 400;
        font-size: 18px;
        line-height: 22px;
        letter-spacing: 0.035em;
        color: #172359;
    }

    .form-label{
        font-weight: 400;
        font-size: 12px;
        line-height: 14px;
        letter-spacing: 0.035em;
        color: #172359;
        text-transform:none;
    }
</style>
<!-- table -->
<section id="content-datatable">
    <div class="row">
        <div class="col-12">
            <div class="row">
                <div class="col directory_title">
                    @if (Model.IsVisibleDescription)
                    {
                        <h1>@Model.ViewDescription</h1>
                    }
                </div>
                @if (User.HasClaim(AccessKeyNames.ReferenceService, AccessKeyValues.Add))
                {
                    <div class="d-none" id="HtmlbuttonAdd">

                        <button data-btn-params='{"actionType":"@ActionType.Add" }' data-btn-type="add" data-for-table="@Model.TableName" type="button" class="btn btn-primary">
                            <i class="bx bx-plus"></i> Добавить
                        </button>

                    </div>
                }
            </div>

            <div class="table-responsive overflow-hidden">
                <table asp-for="Model" asp-access-key-name="@AccessKeyNames.ReferenceService" class="directory_names table service"></table>
            </div>

        </div>
    </div>
</section>
<!--/ table -->
@section Scripts
    {
    <script>
        const $table = $('#@(Model.TableName)'),
            isCanAdd = $table.is('[data-action-add]'),
            isCanEdit = $table.is('[data-action-edit]'),
            isCanRemove = $table.is('[data-action-remove]');

        $(document).ready(function () {
            $table.DataTable({
                sDom: `<'row'<'col-sm-12 col-md-4'f>'<'col-sm-12 col-md-6'><'col-sm-12 col-md-2 text-md-end my-4 buttonAdd directory_search'>>` +
                    "<'row mb-3'<'col-sm-12 col-md-3'<'#types'>><'col-sm-12 col-md-3'<'#providers'>><'col-sm-12 col-md-3'<'#hashtags'>><'col-sm-12 col-md-2'l>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",

                processing: true,
                serverSide: true,
                filter: true,
                searchDelay: 1500,
                ajax: {
                    async: true,
                    url: $table.data('action-table'),
                    type: "POST",
                    datatype: "json",
                    dataSrc: function (json) {
                        return json.data;
                    }
                },
                initComplete: function () {
                    var providersColumn = this.api().column(2);
                    var typesColumn = this.api().column(3);
                    var hashtagsColumn = this.api().column(4);

                    $('.buttonAdd').append($('#HtmlbuttonAdd').html());
                    $('#HtmlbuttonAdd').remove();

                    $('[name="mainDataTable_length"]')
                        .select2({ minimumResultsForSearch: Infinity })
                    $('tbody').addClass('container-fluid directory_names-items p-0');

                    var $providers = $('#providers');
                    $providers.html('<label class="form-label" for="selectProviders">Поставщик</label>');
                    var $procedureSelect = $('<select id="selectProviders" class="form-select"><option selected value="">ВСЕ</option>@Html.Raw(providersOptions)</select>')
                        .appendTo($providers)
                        .select2({
                            language: "ru",
                        })
                        .on('change', function () {
                            providersColumn.search($(this).val()).draw();
                        });

                    var $types = $('#types');
                    $types.html('<label class="form-label" for="selectTypes">Тип</label>');
                    var $typesSelect = $('<select id="selectTypes" class="form-select" ><option selected value="">ВСЕ</option>@Html.Raw(typesOptions)</select>')
                        .appendTo($types)
                        .select2({ minimumResultsForSearch: Infinity })
                        .on('change', function () {
                            typesColumn.search($(this).val()).draw();
                            $.ajax({
                                type: "GET",
                                url: '/Reference/GetOfficeTypeDataJson',
                                data: { type: this.value },
                                beforeSend: () => {
                                    $procedureSelect.empty();
                                    $procedureSelect.prop("disabled", true);
                                },
                                success: (data) => {
                                    data.forEach(function (item) {
                                        $procedureSelect.append($('<option>', {
                                            value: item.id,
                                            text: item.officeName
                                        }));
                                    });
                                },
                                complete: () => {
                                    $procedureSelect.prop("disabled", false);
                                    $procedureSelect.append($('<option>', {
                                        value: "",
                                        text: "ВСЕ",
                                        selected: true
                                    }))

                                }
                            });
                        });

                    var $hashtags = $('#hashtags');
                    $hashtags.html('<label class="form-label" for="hashtagsTypes">Хэштег</label>');
                    var $hashtagsSelect = $('<select id="hashtagsTypes" class="form-select" ><option selected value="">ВСЕ</option>@Html.Raw(hashtagOptions)</select>')
                        .appendTo($hashtags)
                        .select2({ minimumResultsForSearch: Infinity })
                        .on('change', function () {
                            hashtagsColumn.search('#' + $(this).val()).draw();
                        });

                    $('.change_view').click(function (e) {
                        $('.change_view').removeClass('active');

                        if ($(this).hasClass('active')) {
                            $(this).removeClass('active')
                        } else {
                            $(this).toggleClass('active')
                        }

                        if ($('.change_view-block').hasClass('active')) {
                            $('.directory_names-items').addClass('row row-cols-4');
                            $('.names-items').addClass('d-flex');
                            $('.directory_names-items').addClass('block-view')
                        } else {
                            $('.directory_names-items').removeClass('row row-cols-4');
                            $('.names-items').removeClass('d-flex');
                            $('.directory_names-items').removeClass('block-view')
                        }

                    })
                },

                columnDefs: [
                    {
                        data: "id",
                        targets: 0,
                        title: '',
                        visible: false,
                        orderable: false
                    },
                    {
                        targets: 1,
                        orderable: false,
                        title: `<div class="row"><h1 class="col name">Наименование</h1>
                                <div class="col row change_view_items align-items-end justify-content-end p-0">
                                    <div class= "col-auto d-flex justify-content-center align-items-center change_view change_view-inline active">
                                        <img src="/img/humburger.svg" alt = "" >
                                            </div>
                                            <div class= "col-auto d-flex justify-content-center align-items-center change_view change_view-block">
                                                <img src="/img/dots.svg" alt = "" >
                                                    </div>
                                                    </div>
                                                    </div>`,
                    },
                    {
                        name: "providers",
                        targets: 2,
                        title: '',
                        visible: false,
                        orderable: false
                    },
                    {
                        name: "types",
                        targets: 3,
                        title: '',
                        visible: false,
                        orderable: false
                    },
                    {
                        name: "hashtags",
                        targets: 4,
                        title: '',
                        visible: false,
                        orderable: false
                    }

                        //targets: -1,
                        //data: "id",
                        //className: 'text-center editor-edit',
                        //sorting: false,
                        //orderable: false
                    
                ],
                columns: [
                    {
                        
                    },
                    {
                        data: "serviceName",
                        className: "row h-100 w-100",
                        render: function (data, type, row) {
                            return `<a class="d-flex" href="/Reference/Services/Details/${row.id}">
                                          <div class="col names-items align-items-center justify-content-between">
                                                                    <p class="serviceName">${data}</p>
                                                           ${row.officeName === null ? '' : '<span class="officeName">' + row.officeName + '</span>'}
                                                           </div></a>`;
                        },
                        orderable: false
                    },
                    {
                        render: function (data, type, row) {
                            return "";
                        }
                    },
                    {
                        render: function (data, type, row) {
                            return "";
                        }
                    },
                    {
                          render: function(data, type, row) {
                            return "";
                        }
                    }
                ]
            });
            $table.on("reload", () => {
                $table.DataTable().ajax.reload(null, false);
            });
        });

        $table.on('draw.dt', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    boundary: document.body
                });
            });
        });

        const EditBtn = (data) => {
            const params = JSON.stringify(data);
            return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="edit" data-bs-toggle="tooltip" title="Изменить" class="btn btn-sm btn-icon text-body">
                                    <i class="bx bx-edit"></i></a>`;
        }

        const DeleteBtn = (data) => {
            const params = JSON.stringify(data);
            return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="remove" data-bs-toggle="tooltip" title="Удалить" class="btn btn-sm btn-icon text-danger">
                                    <i class="bx bx-trash"></i></a>`;
        }

        const CopyBtn = (data) => {
            const params = JSON.stringify(data);
            return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="copy" data-action-copy="/Reference/ServiceСopy" data-bs-toggle="tooltip" title="Скопировать" class="btn btn-sm btn-icon text-success">
                                    <i class='bx bx-copy'></i></a>`;
        }

    </script>
}
