@model ViewModelBuilder
@{
    string Id = ViewContext.RouteData.Values["Id"]?.ToString();
    string navId = "documents";
    string proceduresOptions = Model.Model as string;
} 
<div class="row directory_names" id="content-documents">
    <div class="col-2 aside_menu">
        <partial name="Services/Details/_NavLeft" model="navId" />
    </div>
    <div class="col-10 px-4">
        <div class="directory_names-items popup_container" id="navs-tabs-default">

            <div class="row justify-content-between align-items-center">
                <div class="col">

                    @if (Model.IsVisibleDescription)
                    {
                        <div class="b-s-14">@Model.ViewDescription</div>
                    }
                </div>
                @if (User.HasClaim(AccessKeyNames.ReferenceService, AccessKeyValues.Add))
                {
                    <div class="col-md-2 text-md-end directory_search">
                        <button data-btn-params='{"actionType":"@ActionType.Add", "serviceId" : "@Id" }' data-btn-type="add" data-for-table="@Model.TableName" type="button" class="btn btn-primary">
                            <i class="bi bi-plus"></i> Добавить
                        </button>
                    </div>
                }
            </div>
            <div class="table-responsive">
                <table asp-for="Model" asp-access-key-name="@AccessKeyNames.ReferenceService" class="directory_names-items table"></table>
            </div>
        </div>
    </div>
</div>

@section Scripts
    {
   
    <script>
        const $table = $('#@(Model.TableName)'),
            isCanAdd = $table.is('[data-action-add]'),
            isCanEdit = $table.is('[data-action-edit]'),
            isCanRemove = $table.is('[data-action-remove]');

        $(document).ready(function () {
            $table.DataTable({
                sDom: "<'row me-5 pe-1'<'col-md-6'f><'col-md-6'<'#procedure'>>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
                processing: true,
                serverSide: true,
                filter: true,
                destroy: true,
                searching: true,
                searchDelay: 1500,
                ajax: {
                    url: $table.data('action-table'),
                    type: "POST",
                    datatype: "json",
                    dataSrc: function (json) {
                        return json.data;
                    }
                },
                initComplete: function () {
                    var procedureColumn = this.api().column(5);

                    var $procedure = $('#procedure');
                    $procedure.html('<label class="form-label" for="selectProcedure">Процедура</label>');
                    var $procedureSelect = $('<select id="selectProcedure" class="form-select form-select-sm"><option selected value="">ВСЕ</option>@Html.Raw(proceduresOptions)</select>')
                        .appendTo($procedure)
                        .select2({minimumResultsForSearch: Infinity})
                        .on('change', function () {
                            procedureColumn.search($(this).val()).draw();
                        });
                    $('[name="mainDataTable_length"]')
                    .select2({minimumResultsForSearch: Infinity});
                },
                columnDefs: [
                    {
                        data: "id",
                        targets: 0,
                        title: '',
                        visible: false,
                        orderable: false
                    },
                    {
                        targets: 1,
                        title: 'Наименование',
                        orderable: false
                    },
                    {
                        targets: 2,
                        title: 'Обязательность',
                        orderable: false
                    },
                    {
                        targets: 3,
                        title: 'Тип',
                        className: 'text-center',
                        orderable: false
                    },
                    {
                        "width": "55px",
                        targets: 4,
                        title: 'Кол-во',
                        className: 'text-center',
                        orderable: false
                    },
                    {
                        name: "sServicesProcedureName",
                        targets: 5,
                        title: '',
                        visible: false,
                        orderable: false
                    },
                    {
                        targets: -1,
                        title: 'Действия',
                        data: "id",
                        width: "80px",
                        className: 'text-center editor-edit',
                        sorting: false,
                        orderable: false
                    }
                ],
                columns: [
                    {},
                    {
                        render: function (data, type, row) {
                            return `<span>${row.documentName}</span>
                                    ${row.procedureName === null ? '' : '<br /><small>' + row.procedureName + '</small>'}`;
                        }
                    },
                    {
                        data: "documentNeedsName"
                    },
                    {
                        data: "documentTypeName"
                    },
                    {
                        data: "documentCount"
                    },
                    {
                        render: function (data, type, row) {
                            return "";
                        }
                    },
                    {
                        render: function (data, type, row) {
                            let content = "";
                            if (isCanEdit === true)
                                content += EditBtn({ "id": data, "actionType": 1, "serviceId": "@Id" });
                            if (isCanRemove === true)
                                content += DeleteBtn({ "id": data });
                            return content;
                        }
                    }
                ]
            });
            $table.on("reload", () => {
                $table.DataTable().ajax.reload(null, false);
            });
        });

        $table.on('draw.dt', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    boundary: document.body
                });
            });
        });

        const EditBtn = (data) => {
            const params = JSON.stringify(data);
            return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="edit" data-bs-toggle="tooltip" title="Изменить" class="btn btn-sm btn-icon text-body">
                    <i class="bi bi-pencil-square"></i></a>`;
        }

        const DeleteBtn = (data) => {
            const params = JSON.stringify(data);
            return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="remove" data-bs-toggle="tooltip" title="Удалить" class="btn btn-sm btn-icon text-danger">
                    <i class="bi bi-trash"></i></a>`;
        }
    </script>
}