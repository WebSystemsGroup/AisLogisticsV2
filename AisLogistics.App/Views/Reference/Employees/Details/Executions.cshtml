@model ViewModelBuilder
@{
    string Id = ViewContext.RouteData.Values["Id"]?.ToString();
    string navId = "executions";
}

<section id="content-employee-jobs">
    <div class="row">
        <div class="col-12">
            <div class="nav-align-left">
                <partial name="Employees/Details/_NavLeft" model="navId" />
                <div class="tab-content shadow-none">
                    <div class="tab-pane fade active show" id="navs-tabs-default">
                        <div class="row">
                            <div class="col-12">
                                <div class="row">
                                    @if (Model.IsVisibleTitle)
                                    {
                                        <h4 class="card-title">@Model.ViewTitle</h4>
                                    }
                                </div>
                                <div class="row">
                                    <div class="col-md-10">
                                        @if (Model.IsVisibleDescription)
                                        {
                                            <p class="card-text">
                                                @Model.ViewDescription
                                            </p>
                                        }
                                    </div>
                                    @if (User.HasClaim(AccessKeyNames.ReferenceService, AccessKeyValues.Add) && !ViewBag.isActive)
                                    {
                                        <div class="col-md-2 text-md-end">
                                            <button data-btn-params='{"actionType":"@ActionType.Add", "employeeId" : "@Id" }' data-btn-type="add" data-for-table="@Model.TableName" type="button" class="btn btn-primary">
                                                <i class="bx bx-plus"></i> Добавить
                                            </button>
                                        </div>
                                    }
                                </div>
                                <div class="table-responsive">
                                    <table asp-for="Model" asp-access-key-name="@AccessKeyNames.ReferenceService" class="table table-sm table-bordered"></table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@section Scripts
{
    <script>
        const $table = $('#@(Model.TableName)'), 
            isCanAdd = $table.is('[data-action-add]'),
            isCanEdit = $table.is('[data-action-edit]'),
            isCanRemove = $table.is('[data-action-remove]');

        $(document).ready(function() {
            $table.DataTable({
                sDom: "<'row'<'col-sm-12 col-md-6 'f><'col-sm-12 col-md-6'l>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
                processing: true,
                searching: false,
                serverSide: true,
                filter: true,
                searchDelay: 1500,
                ajax: {
                    url: $table.data('action-table'),
                    type: "POST",
                    datatype: "json",
                    dataSrc: function(json) {
                        return json.data;
                    }
                },
                columnDefs: [
                    {
                        data: "id",
                        targets: 0,
                        title: '',
                        visible: false,
                        orderable: false
                    },
                    {
                        targets: 1,
                        title: 'Исполнение',
                        width: "80px",
                        className: 'text-center',
                        orderable: false
                    },
                    {
                        targets: 2,
                        title: 'Дата начала',
                        width: "80px",
                        className: 'text-center',
                        orderable: false
                    },
                    {
                        targets: 3,
                        title: 'Дата окончания',
                        width: "80px",
                        className: 'text-center',
                        orderable: false
                    },
                    {
                        targets: 4,
                        title: 'Комментарий',
                        orderable: false
                    },
                    {
                        targets: 5,
                        title: 'Сотрудник',
                        orderable: false
                    },
                    {
                        targets: -1,
                        title: 'Действия',
                        data: "id",
                        width: "80px",
                        className: 'text-center editor-edit',
                        sorting: false,
                        orderable: false
                    }
                ],
                columns: [
                    { },
                    { 
                        data: "isExecution",
                        render: function(data, type, row)
                        {
                            return `<i class="bx bx-check-circle text-${ data === true ? 'success' : 'danger'}"></i>`;
                        }
                    },
                    { data: "dateStart" },
                    { data: "dateStop" },
                    { data: "commentt" },
                    {
                        data: "employeesFioAdd",
                        render: function(data, type, row) {
                            return `${data}<p class="small">${row.dateAdd}</p>`;
                        }
                    },
                    {
                        render: function(data, type, row) {
                            let content = "";
                            if (isCanEdit === true && row.isExecution)
                                content += EditBtn({ "id": data, "actionType": 1 });
                            if (isCanRemove === true)
                                content += DeleteBtn({ "id": data });
                            return content;
                        }
                    }
                ]
            });
            $table.on("reload", () => {
                $table.DataTable().ajax.reload(null, false);
            });
        });

        $table.on('draw.dt', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    boundary: document.body
                });
            });
        });

        const EditBtn = (data) => {
            const params = JSON.stringify(data);
            return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="edit" data-bs-toggle="tooltip" title="Изменить" class="btn btn-sm btn-icon text-body">
                            <i class="bx bx-edit"></i></a>`;
        }

        const DeleteBtn = (data) => {
            const params = JSON.stringify(data);
            return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="remove" data-bs-toggle="tooltip" title="Удалить" class="btn btn-sm btn-icon text-danger">
            <i class="bx bx-trash"></i></a>`;
        }
    </script>
}