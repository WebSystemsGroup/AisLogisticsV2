@model ViewModelBuilder
@{
    string Id = ViewContext.RouteData.Values["Id"]?.ToString();
    string navId = "auth";

    var aspUserId = Model.Model;
}


<div class="row directory_names" id="content-datatable">
    <div class="col-auto aside_menu">
        <partial name="Employees/Details/_NavLeft" model="navId" />
    </div>
    <div class="col">
        <div class="directory_names-items popup_container" id="navs-tabs-default">
            <div class="row justify-content-between align-items-center">
                <div class="col">
                    @if (Model.IsVisibleDescription)
                    {
                        <div class="b-s-14">@Model.ViewDescription</div>
                    }
                </div>
                <div class="col-auto text-md-end">
                                <a asp-action="EmployeePasswordChangeModal" asp-route-id="@Id" asp-route-actiontype="edit" data-btn-type="modal" class="btn btn-primary float-end">
                                    <i class="bi bi-pencil-square"></i> Изменить пароль
                                </a>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 mt-3">
                                @await Component.InvokeAsync(nameof(IdentityUserInformationComponent), aspUserId)
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <div class="table-responsive">
                                    <h5>Роли</h5>
                        <table asp-for="Model" asp-access-key-name="@AccessKeyNames.ReferenceService" class="directory_names-items table"></table>
                                </div>
                            </div>
                        </div>
                        @*<div class="row">
                            <div class="col-md-12">
                                <ul class="nav nav-tabs nav-top tabs-line" role="tablist">
                                    <li class="nav-item"><a class="nav-link active" data-bs-target="#navs-tabs-default" href="#" id="ForService" role="tab">Общие данные</a></li>
                                    <li class="nav-item"><a class="nav-link" data-bs-target="#navs-tabs-default" href="#" id="ForResult" role="tab">Роли</a></li>
                                    <li class="nav-item"><a class="nav-link" data-bs-target="#navs-tabs-default" href="#" id="ForResult" role="tab">Лог</a></li>
                                </ul>
                                <div class="tab-content">
                                  <div class="tab-pane active" id="navs-tabs-default" role="tabpanel">
                                      
                                  </div>
                                </div>
                                
                            </div>
                        </div>*@
                    </div>
                </div>
            </div>
        

@section Scripts
{
    <script>
        $(function(){
            //var tabEl = document.querySelector('a[role="tab"]');
            //tabEl.addEventListener('shown.bs.tab', function (event) {
            //  event.target // newly activated tab
            //  event.relatedTarget // previous active tab
            //})

            $(document).on("change", "input:checkbox.role-switch", function (e) {
                //console.log(e);
                var params = $(this).data("btn-params");
                params.selected = $(this).is(':checked');

                var $parent = $('#@Model.TableName');
                var url = $parent.data("action-edit");

                $.ajax({
                    url: url,
                    method: 'POST',
                    data: params,
                    async: false,
                    success: function(){
                        $parent.trigger("reload");
                    },
                    error: (data, textStatus) => {
                    }
                });
            });
        });

        

        const $table = $('#@(Model.TableName)'), 
            isCanAdd = $table.is('[data-action-add]'),
            isCanEdit = $table.is('[data-action-edit]'),
            isCanRemove = $table.is('[data-action-remove]');

        $(document).ready(function() {
            $table.DataTable({
                sDom: "<'row'<'col-sm-12 col-md-6 'f><'col-sm-12 col-md-6'l>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
                processing: true,
                searching: false,
                paging: false,
                serverSide: true,
                filter: true,
                bInfo: false,
                searchDelay: 1500,
                ajax: {
                    url: $table.data('action-table'),
                    type: "POST",
                    datatype: "json",
                    dataSrc: function(json) {
                        return json.data;
                    }
                },
                columnDefs: [
                    {
                        data: "id",
                        targets: 0,
                        title: '',
                        visible: false,
                        orderable: false
                    },
                    {
                        targets: 1,
                        title: 'Наименование',
                        orderable: false
                    },
                    {
                        targets: -1,
                        title: 'Действия',
                        data: "id",
                        className: 'text-center editor-edit',
                        sorting: false,
                        orderable: false
                    }
                ],
                columns: [
                    { },
                    { 
                        data: "roleName"
                    },
                    {
                        render: function(data, type, row) {
                            return CheckSwitch({ "userId" : "@aspUserId", "roleId" : data, "selected": row.isUserInRole });
                        }
                    }
                ]
            });
            $table.on("reload", () => {
                $table.DataTable().ajax.reload(null, false);
            });
        });

        $table.on('draw.dt', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    boundary: document.body
                });
            });
        });

        var CheckSwitch = function(data)
        {
            var params = JSON.stringify(data);
            return `<input data-btn-params='${params}' class="role-switch form-check-input" type="checkbox" data-bs-toggle="tooltip" title="Изменить" ${data.selected === true ? 'checked' : ''}>`;
        }

        //const EditBtn = (data) => {
        //    const params = JSON.stringify(data);
        //    return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="edit" data-bs-toggle="tooltip" title="Изменить" class="btn btn-sm btn-icon text-body">
        //    <i class="bi bi-pencil-square"></i></a>`;
        //}

        //const DeleteBtn = (data) => {
        //    const params = JSON.stringify(data);
        //    return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="remove" data-bs-toggle="tooltip" title="Удалить" class="btn btn-sm btn-icon text-danger">
        //    <i class="bi bi-trash"></i></a>`;
        //}
    </script>
}
