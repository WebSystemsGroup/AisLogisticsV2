@using SmevRouter
@model AisLogistics.App.ViewModels.Cases.SmevCreateResponseModel
@{
    var applicants = Model.GetApplicants();
    var request = new SendFnsRegUlTrConRequestData()
            {
                Applicants = new FnsRegUlApplicant[]
                                        {
                    new FnsRegUlApplicant
                    {
                        Fio = new FioType(),

                    }
                                        },
                Attachments = new[] { new RequestAttachment() }
            };
}
<style>
    #smev-data-form-content span .select2-selection.select2-selection--single {
        background-color: #e5edfc !important;
    }

    #smev-data-form-content tr.is_active {
        color: #39da8a;
    }

    #smev-request-tabContent .tab-pane {
        height: 550px;
    }

    #smev-data-form-content div.lg-container {
        position: relative;
        z-index: 9999;
    }

    #smev-data-form-content .accordion-button {
        background-color: #e5edfc !important;
    }

    #smev-data-form-content #listService {
        font-size: 16px;
    }

        #smev-data-form-content #listService .select2-selection.select2-selection--single {
            height: auto !important;
        }

        #smev-data-form-content #listService .select2-selection__rendered {
            white-space: normal !important;
        }

    ul.address-list {
        display: none;
        width: 100%;
        z-index: 1000;
        position: absolute;
        list-style: none;
        background-color: #fff;
        border: 1px solid #ccc;
        border: 1px solid rgba(0,0,0,0.15);
        border-radius: 4px;
        -webkit-box-shadow: 0 6px 12px rgba(0,0,0,0.175);
        box-shadow: 0 6px 12px rgba(0,0,0,0.175);
        background-clip: padding-box;
    }

        ul.address-list li {
            padding: 6px;
        }

            ul.address-list li:hover {
                color: white;
                background-color: #5a8dee;
                cursor: pointer
            }

    input[pattern^="[А-я]"] {
        text-transform: capitalize;
    }

    :where(input,input:required):invalid:not(:placeholder-shown) {
        border-color: #ff5b5c;
        box-shadow: 0 0 0.1875rem 0.0625rem rgb(57 218 138 / 18%);
    }

    :where(input,input:required):valid:not(:placeholder-shown) {
        border-color: #39da8a;
        box-shadow: 0 0 0.1875rem 0.0625rem rgb(57 218 138 / 18%);
    }
</style>
<div class="row justify-content-center" id="smev_request">
    <div class="col-10">
        <ul class="nav nav-tabs nav-justified tabs-line mb-3" id="smev-request-tablist" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" data-bs-toggle="pill" data-bs-target="#smev-request-tab1" type="button">Заявитель</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" data-bs-toggle="pill" data-bs-target="#smev-request-tab6" type="button">Документы</button>
            </li>
        </ul>
        <div class="tab-content" id="smev-request-tab-content">
            <div class="tab-pane fade show active" id="smev-request-tab1" role="tabpanel">
              
                <div class="row justify-content-center" data-person>
                    <div class="col-12">
                        <div class="row mb-1">
                            <div class="col-8">
                                <label class="form-label" asp-for="@request.LegalName">Полное наименование юридического лица</label>
                                <input type="text" class="form-control required" placeholder="Полное наименование юридического лица" asp-for="@request.LegalName">
                            </div>
                            <div class="col-4">
                                <label class="form-label" asp-for="@request.Ogrn">ОГРН юридического лица</label>
                                <input type="text" class="form-control" placeholder="ОГРН" pattern="[0-9]{13,}" asp-for="@request.Ogrn">
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col-6">
                                <label class="form-label" asp-for="@request.FnsDepartmentId">Отделение ФНС</label>
                                <select class="select2-search required" asp-for="@request.FnsDepartmentId" data-dictionary-table>
                                </select>
                            </div>
                            <div class="col-6">
                                <label class="form-label" asp-for="@request.ApplicationId">Код заявления</label>
                                <select value="null" class="form-select select2-search required" asp-for="@request.ApplicationId"
                                        data-dictionary='{"dictionary":"FnsRegUlApplications"}'>
                                </select>
                            </div>
                        </div>
                          <div class="row g-3">
                    <div class="col-12 mx-auto">
                        <div class="divider text-start">
                            <div class="divider-text fs-5 b-s-16">Заявитель</div>
                        </div>
                    </div>
                </div>
                    <div class="row mb-1">
                            <div class="col-12">
                                <label class="form-label">Заявитель</label>
                                <select class="form-select select2-nosearch applicants">
                                    <option value="">Выберите заявителя</option>
                                    @for (int i = 0; i < applicants.Count; i++)
                                    {
                                        <option value="@i">@applicants[i].LastName @applicants[i].FirstName @applicants[i].SecondName</option>
                                    }
                                </select>
                            </div>
                        </div>
                <div class="row justify-content-center mb-1" id="PreviousNames">
                   
              </div>
                <div class="justify-content-center row mb-3" id="add-button">
                    <div class="col-2">
                        <div class="text-center mt-3">
                            <button type="button " id="add-PreviousNames" class="btn btn-primary">
                                Добавить
                            </button>
                        </div>
                    </div>
                </div>
                        <br />
                        
                    </div>
                </div>
            </div>

            <div class="tab-pane fade show" id="smev-request-tab6" role="tabpanel">
                <div class="row justify-content-end">
                    <div class="col-12">
                        <button type="button" class="btn btn-outline-secondary buttons_height lh-1" onclick="getServiceDocuments()">
                            ОБНОВИТЬ
                        </button>
                        <button type="button" class="btn btn-outline-secondary buttons_height lh-1" data-upload-type="Desktop">
                            ЗАГР
                        </button>
                        <button type="button" class="btn btn-outline-secondary buttons_height lh-1" data-upload-type="Scan">
                            СКАН
                        </button>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-12">
                        <table id="attachmentsBlock" class="table table-hover table-striped" style="table-layout: fixed">
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-10" id="noDocuments" style="display:none">
                        <div class="alert alert-primary" role="alert">
                            <h6 class="alert-heading mb-1">Нет документов</h6>
                            <span>Добавьте файлы к услуге</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row justify-content-center" id="previousNamesOriginal">
            <div class="col-11">
                         <div class="row mb-2">
                            <div class="col-4">
                                <label class="form-label" asp-for="@request.Applicants[0].Fio.LastName">Фамилия</label>
                                <input type="text" class="form-control required" asp-for="@request.Applicants[0].Fio.LastName" pattern="[А-я]{1,}" placeholder="Фамилия">
                            </div>
                            <div class="col-4">
                                <label class="form-label" asp-for="@request.Applicants[0].Fio.FirstName">Имя</label>
                                <input type="text" class="form-control required" asp-for="@request.Applicants[0].Fio.FirstName" pattern="[А-я]{1,}" placeholder="Имя">
                            </div>
                            <div class="col-4">
                                <label class="form-label" asp-for="@request.Applicants[0].Fio.SecondName">Отчество</label>
                                <input type="text" class="form-control" asp-for="@request.Applicants[0].Fio.SecondName" placeholder="Отчество">
                            </div>
                            <div class="col-6">
                                <label class="form-label Input-label" asp-for="@request.Applicants[0].Email">E-mail</label>
                                <input type="text" class="form-control" placeholder="E-mail" pattern="[A-z]{1,}[a-z0-9._%+-]+[\D]+[a-z]+\.[a-z]{2,4}$" asp-for="@request.Applicants[0].Email">
                            </div>
                            <div class="col-6">
                                <label class="form-label" asp-for="@request.Applicants[0].Inn">ИНН </label>
                                <input type="text" class="form-control required" placeholder="ИНН" pattern="[0-9]{12,}" asp-for="@request.Applicants[0].Inn">
                            </div>
                        </div>
              </div>
              <div class="col-1 mt-5">
              <button type="button" class="btn btn-danger" onclick="blockRemove(this, '#PreviousNames')">
                   <i class="bi bi-trash"></i>
              </button>
            </div>
            <hr/>
        </div>
<script>
    var applicants = @Json.Serialize(applicants);
    var formContent = document.getElementById("smev-data-form-content");
    var $formContent = $("#smev_request");
    var documentId;
    var smevForm = {
        init: () => {
            getDictionaries();
            getSmevDocumentTypes();
            fileUploadInit($formContent);
            $.post(`/SmevFns/GetFnsDepartments`,
                function(items) {
                    $('#request_FnsDepartmentId');
                    items.forEach((item) => {
                        $('#request_FnsDepartmentId').append(new Option(`${item.name} (${item.address})`, item.code));
                    });
                });

                $('#smev_request').find("select.select2-search").each(function() {
                $(this).select2({
                    dropdownParent: $("#mainModal")
                });
              });
              addForm('PreviousNames', 'previousNamesOriginal');
                 renameBlock(formContent.querySelector('#previousNamesOriginal'), 100, true);
                
            $('#add-PreviousNames').on('click', function() {
                addForm('PreviousNames', 'previousNamesOriginal');
            });
            visibilityBlock($('#previousNamesOriginal'), true, true);

            $formContent.find('input.required').each(function() {
                addValidation($(this));
            });

            select2Init($formContent);
            let options = { clearIncomplete: true, showMaskOnHover: false }
            $formContent.find('[name$="Inn"]').inputmask("9{12}", options);
            $formContent.find('[name$="Email"]').inputmask("email", options);
            $formContent.find('[name$="Ogrn"]').inputmask("9{13}", options);
            getServiceDocuments();
            //===документы===
            $('#request_ApplicationId').change(function() {
                getSmevDocumentTypes();
                getServiceDocuments();
            });
        }
    };

    //---типы документов смэв
    var smevDocTypes = '';
    var DocCount = 0;
    function getSmevDocumentTypes() {
        $.ajax({
            url: '../SmevFns/Smev_RequestFnsRegAppliedDocuments',
            type: 'POST',
            //   async: false,
            data: { ApplicationId: $('#request_ApplicationId').val() },
            success: function(items) {
                smevDocTypes = '';
                items.dictionary.forEach(function(item, i, arr) {
                    smevDocTypes = smevDocTypes + `<option  value="${item.key}">` + item.value + `</option>`;
                });
                getServiceDocuments();
            }
        });
    }
    getServiceDocuments();
    function getServiceDocuments() {

        $.ajax({
            url: '/Cases/ServiceDocumentsJson',
            type: "POST",
            // async: false,
            data: { id: $('#ServiceId').val() },
            success: function(data) {
                $('#attachmentsBlock tbody').empty();
                documentId = data[0].id;
                let k = 0;
                data.forEach(doc =>
                    doc.files.forEach(file => {

                        k++;

                        let container = $('<div class="my-3">');
                        container.attr('data-attach', k - 1);
                        let tr = $('<tr>');
                        tr.addClass('align-middle');
                        tr.append(`<td data-index class="px-2" style="width: 1%;">${k}.</td>`);
                        tr.append(`<td data-name class="px-2">${file.name}${file.extension}</td>`);
                        tr.append(
                            `<td class="px-2" style="width: 350px; max-width: 350px;">
                                                          <select type="select"  onchage="docChange(this)" class="select2DOC Fns select2-search">
                                                              <option value=""  selected>Выберите тип</option>
                                                              ${smevDocTypes}
                                                          </select>
                                                       </td>`);
                        tr.append(
                            `<td class="px-2" style="width: 10%;">${(file.size / 1024).toFixed(2)} кБ</td>`);
                        tr.append(
                            `<td class="px-2" style="width: 1%;">
                                                             <a class="btn btn-sm btn-icon viewing-file" data-bs-toggle="tooltip" title="" data-sub-html="${file.name}${file.extension}" href="/SmevBase/DownloadFile/${file.id}" data-bs-original-title="Просмотр" aria-label="Просмотр">
                                                                <i class="bx bx-show"></i>
                                                             </a>
                                                         </td>`);
                        tr.append(
                            `<td class="px-2" style="width: 1%;">
                                                         <i onclick="docMove('up', this)" role="button" class='bx bx-chevron-up btn-link'></i>
                                                         <i onclick="docMove('down', this)" role="button" class='bx bx-chevron-down btn-link'></i>
                                                 </td>`);
                        tr.append(
                            `<td class="px-2" style="width: 1%;">
                                                              <i onclick="docRemove(this)" role="button" class='bi bi-trash'></i>
                                                         </td>`);

                        let trHide = $(
                            '<tr class="" style="display:none" >');
                        trHide.append(
                            `<td style="width: 1%;">
                                                             <input type="text" name="request.Attachments[${k - 1}].FileName" disabled value="${file.id}">
                                                         </td>`);
                        trHide.append(
                            `<td style="width: 1%;">
                                                             <input type="text" name="request.Attachments[${k - 1}].IsFtpReference" disabled value="true">
                                                         </td>`);
                        trHide.append(`<td style="width: 1%;"><input type="text" name="request.Attachments[${k - 1}].AttachmentTypeCode" disabled value=""></td>`);
                        container.append(tr);
                        container.append(trHide);
                        $('#attachmentsBlock tbody').append(container);

                    })
                )
                $('.select2DOC').select2();
                $(document).on('change', 'select.select2DOC', function(event) {
                    var $select = $(this);
                    var $option = $select.find('option:selected').val();
                    var row = $select.closest('tr');
                    if ($option == '') {
                        row.removeClass('is_active');
                    } else {
                        row.addClass('is_active');
                    }
                });

                $('#attachmentsBlock').find("select").each(function() {
                    $(this).on('change', function(event) {

                        let trHide = event.target.closest('tr').nextSibling;
                        $(trHide).find('[name$="AttachmentTypeCode"]').val(event.target.value);
                        switch (event.target.value) {
                            case '':
                                $(trHide).removeClass('active');
                                visibilityBlock($(trHide), true, true);
                                break;

                            default:
                                $(trHide).addClass('active');
                                visibilityBlock($(trHide), true, false);
                        }
                        renameAttach();
                    });
                });

                if (data.length == 0) formContent.find('#noDocuments').show();
                const dynamicGallery = document.getElementById('smev-request-tab6');
                dynamicGallery.addEventListener('lgBeforeOpen', (event) => {
                    $(dynamicGallery).find('[data-bs-toggle="tooltip"], .tooltip').tooltip("hide");
                });
                lightGallery(dynamicGallery, {
                    selector: '.viewing-file',
                    escKey: false
                });
            }
        });
    }


    function getDictionaries() {
        let dicts = new Set();
        $('[data-dictionary]').each(function() {
            let $this = $(this);
            let options = $this.data('dictionary');
            if (!dicts.has(options.dictionary)) {
                dicts.add(options.dictionary);
                $.ajax({
                    url: '/SmevBase/SmevGetDictionary',
                    type: 'POST',
                    async: false,
                    data: { type: options.dictionary },
                    success: function(dictionary) {
                        fillSelect(options.dictionary, dictionary);
                    }
                });
            }
        });
    };

    function fillSelect(dictName, dictionary) {
        $.each($(`[data-dictionary*='"${dictName}"']`),
            function() {
                let $this = $(this);
                let items = dictionary;
                $this.empty();
                if (!$this.hasClass('required')) {
                    $this.append(new Option('Не выбран', ''));
                }

                if ($this.is('[data-value-value]')) {
                    items.dictionary.forEach(function(item) {
                        $this.append(new Option(item.value, item.value));
                    });
                } else {
                    items.dictionary.forEach(function(item) {
                        $this.append(new Option(item.value, item.key));
                    });
                }

                if (items.defaultKey != null) {
                    $this.val(items.defaultKey).trigger('update');
                    $this.attr('data-def', items.defaultKey);
                } else {
                    let defVal = $this.data('dictionary').default_value;
                    if (defVal) {
                        $this.val(defVal).trigger('update');
                        $this.attr('data-def', defVal);
                    }
                }
            }
        );

    }

    function hidingblock(blockId, tid, status) { //Функция запускается при клике ПОКАЗАТЬ
        if (!tid) {
            tid = blockId.id.split('_');
            tid.pop();
            tid = tid.join('_');
            tid = tid + '_';
        }
        blockId?.querySelectorAll('input')?.forEach(item => {
            item.value != '' ? item.classList.add('custom-input-value') : item.classList.remove('custom-input-value');
        });
        status ? blockId.classList.remove('d-none') : blockId.classList.toggle('d-none');
        disableAddress('[data-disable-address]');
        document.querySelector(`#${tid}Apartmen_Valuee`) ? document.querySelector(`#${tid}Apartmen_Valuee`).removeAttribute('disabled') : void 0;
        document.querySelector(`#${tid}Apartmen_Typee`) ? document.querySelector(`#${tid}Apartmen_Typee`).removeAttribute('disabled') : void 0;
    };

    function addValidation($el) {
        SmevDataFormValidation.addField($el.attr('name'),
            {
                validators: {
                    notEmpty: {}
                }
            });
        SmevDataFormValidation.elements[$el.attr('name')] = [$el[0]];
        $el.addClass('required');
    }

    function removeValidation($el) {
        if ($el.attr('name') in SmevDataFormValidation.fields) {
            SmevDataFormValidation.removeField($el.attr('name'));
        }
    }

    function visibilityBlock($block, hide, isDisabled) {
        switch (hide) {
            case true:
                if ($block.hasClass('accordion')) {
                    $block.find('.accordion-body').hide();
                } else {
                    $block.hide();
                }
                break;
            case false:
                if ($block.hasClass('accordion')) {
                    $block.find('.accordion-body').show();
                } else {
                    $block.removeClass('d-none')
                    $block.show();
                }
                break;
        }

        switch (isDisabled) {
            case true:
                $block.find('input, select').each(function() {
                    if ($(this).attr('name') in SmevDataFormValidation.fields) {
                        removeValidation($(this));
                    }
                    $(this).prop('disabled', true);
                });
                break;
            case false:
                $block.find('input, select').each(function() {
                    $(this).prop('disabled', false);
                    if ($(this).hasClass('required')) {
                        addValidation($(this));
                    }
                });
                $block.find('[data-disabled]').each(function() {
                    visibilityBlock($(this), true, true);
                });
                break;
        }
    }

    function renameAttach() {
        let indexActive = 0;
        $('#attachmentsBlock [data-attach]').each((index, item) => {
            $(item).attr('data-attach', index);
            $(item).find('[data-index]').html(index + 1);
            $(item).find('input[type="text"]').each(function() {
                $(this).attr('name', $(this).attr('name').replace(/\d+/, indexActive));
            });
            if ($(item).find('tr.active').length > 0) indexActive++;
        });
    }

    function docRemove(el) {
        el.closest('[data-attach]').remove();
        renameAttach();
    }

      function ShowErrorInputs() {
        for (let item of document.querySelectorAll('#smev_request input')) {
            if (item.getAttribute('disabled') == null && item.classList.contains('required') && item.value == '') {
                $('#smev_request').find(`button[data-bs-target="#${item.closest('.tab-pane').id}"]`).trigger('click');
                break;
            }
        }
    }

    function docMove(direction, el) {
        if (direction) {
            let attach = el.closest('[data-attach]');
            const index = $(attach).attr('data-attach');
            const count = $('#attachmentsBlock [data-attach]').length;

            switch (direction) {
                case 'up':
                    if (index > 0) {
                        let attachPrev = $(attach).prev('[data-attach]');
                        attachPrev.before(attach);
                    }
                    break;
                case 'down':
                    if (index < count - 1) {
                        let attachNext = $(attach).next('[data-attach]');
                        attachNext.after(attach);
                    }
                    break;
            }

            renameAttach();
        }
    };

    $('select.applicants').each(function() {
        $(this).on('change',
            function() {
                let id = $(this).val();
                 $formContent.find('[name^="request.Applicants"]').each(function() {
                    $(this).val('');
                });
                if (id) {
                    $formContent.find('[name="request.Applicants[0].Fio.LastName"]').val(applicants[id].lastName);
                    $formContent.find('[name="request.Applicants[0].Fio.FirstName"]').val(applicants[id].firstName);
                    $formContent.find('[name="request.Applicants[0].Fio.SecondName"]').val(applicants[id].secondName);
                    $formContent.find('[name="request.Applicants[0].Email"]').val(applicants[id].email);
                    $formContent.find('[name="request.Applicants[0].Inn"]').val(applicants[id].inn);
                }
            }
        );
    });
    function addForm(cloneListId, originalId) { //Динамическое добавление Принимает (Куда Откуда)
        let cloneList = formContent.querySelector(`#${cloneListId}`);
        let original = formContent.querySelector(`#${originalId}`);
        let cloneBlock = original.cloneNode(true);
        cloneBlock.classList.remove('d-none');
        cloneBlock.removeAttribute('disabled');
        let index = cloneList.querySelectorAll('[data-clone]').length;
        renameBlock(cloneBlock, index);
        blockInit(cloneBlock);
        cloneList.appendChild(cloneBlock);
    }

    function blockRemove(el, cloneListId) {
        el.closest('[data-clone]').remove();
        formContent.querySelectorAll(`${cloneListId} [data-clone]`).forEach((item, index) => renameBlock(item, index));
    }

    function blockInit(block) {
        visibilityBlock($(block), false, false);
        $(block).find("select.select2-nosearch").each(function() {
            $(this).select2({
                dropdownParent: $("#mainModal"),
                minimumResultsForSearch: Infinity
            });
        });

        $(block).find("select.select2-search").each(function() {
            $(this).select2({
                dropdownParent: $("#mainModal")
            });
        });
            let options = { clearIncomplete: true, showMaskOnHover: false }
            $(block).find('[name$="Inn"]').inputmask("9{12}", options);
            $(block).find('[name$="Email"]').inputmask("email", options);
            $(block).find('input.required').each(function() {
                addValidation($(this));
            });
        $(block).find("select").each(function() {
            if ($(this).data('def')) {
                $(this).val($(this).data('def')).trigger('change');
            } else {
                $(this).prop("selectedIndex", 0);
            }
        });
    }

    function renameBlock(cloneBlock, indexId, initOriginal = false) {
        if (!initOriginal) {
            cloneBlock.id = `clone${indexId}`;
            cloneBlock.dataset.id = indexId;
            cloneBlock.setAttribute('data-clone', '');
        }

        cloneBlock.querySelectorAll('input').forEach(item => {
            item.id = item.id.replace(/\d+/, indexId);
            item.name = item.name.replace(/\d+/, indexId);
        });

        cloneBlock.querySelectorAll('label').forEach(item => {
            item.setAttribute('for', item.getAttribute('for').replace(/\d+/, indexId));
        });

        cloneBlock.querySelectorAll('select').forEach(item => {
            item.id ? item.id = item.id.replace(/\d+/, indexId) : void 0;
            item.name ? item.name = item.name.replace(/\d+/, indexId) : void 0;
            item.hasAttribute('data-select2-id') ? item.removeAttribute('data-select2-id') : void 0;
        });
    }
        
</script>

