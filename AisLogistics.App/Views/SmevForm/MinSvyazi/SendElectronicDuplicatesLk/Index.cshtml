@using SmevRouter

@model AisLogistics.App.ViewModels.Cases.SmevCreateResponseModel
@{
    var applicants = Model.GetApplicants();
    var request = new SendElectronicDuplicatesLkRequestData
            {
                UserFio = new FioType(),
                Attachments = new[] { new RequestAttachment() },
            };
}

<style>
    #smev-data-form-content .applicants + span .select2-selection.select2-selection--single {
        background-color: #e5edfc !important;
    }

    #smev-request-tabContent .tab-pane {
        height: 550px;
    }
</style>

<div class="row justify-content-center" id="smev_request">
    <div class="col-10">
        <ul class="nav nav-tabs nav-justified tabs-line mb-3" id="smev-request-tablist" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" data-bs-toggle="pill" data-bs-target="#smev-request-tab1" type="button">Данные заявителя</button>
            </li>

            <li class="nav-item" role="presentation">
                <button class="nav-link" data-bs-toggle="pill" data-bs-target="#smev-request-tab3" type="button">Документы</button>
            </li>
        </ul>
        <div class="tab-content" id="smev-request-tabContent">
            <div class="tab-pane fade show active" id="smev-request-tab1" role="tabpanel">
                <div class="row g-3">
                    <div class="col-12 mx-auto">
                        <div class="divider text-start">
                            <div class="divider-text fs-5 b-s-16">Персональные данные заявителя</div>
                        </div>
                    </div>
                </div>
                <div class="row justify-content-center" data-person>
                    <div class="col-10">
                        <div class="row mb-1">
                            <div class="col-12">
                                <label class="form-label">Заявители</label>
                                <select class="form-select select2-nosearch applicants">
                                    <option value="">Выберите заявителя</option>
                                    @for (int i = 0; i < applicants.Count; i++)
                                    {
                                        <option value="@i">@applicants[i].LastName @applicants[i].FirstName @applicants[i].SecondName</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col-4">
                                <label class="form-label" asp-for="@request.UserFio.LastName">Фамилия</label>
                                <input type="text" class="form-control required" placeholder="Фамилия" asp-for="@request.UserFio.LastName" />
                            </div>
                            <div class="col-4">
                                <label class="form-label" asp-for="@request.UserFio.FirstName">Имя</label>
                                <input type="text" class="form-control required" placeholder="Имя" asp-for="@request.UserFio.FirstName">
                            </div>
                            <div class="col-4">
                                <label class="form-label" asp-for="@request.UserFio.SecondName">Отчество</label>
                                <input type="text" class="form-control" placeholder="Отчество" asp-for="@request.UserFio.SecondName">
                            </div>
                        </div>
                        <div class="row g-3">
                            <div class="col-12 mx-auto">
                                <div class="divider text-start">
                                    <div class="divider-text fs-5 b-s-16">Документ удостоверяющий личность</div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col-12">
                                <label class="form-label" asp-for="@request.UserDocType">Тип документа</label>
                                <select class="form-select select2-nosearch required" asp-for="@request.UserDocType"
                                        data-dictionary='{"dictionary":"SocialProtectMfcDocumentCodes"}'>
                                </select>
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col-4">
                                <label class="form-label" asp-for="@request.UserDocSeries">Серия</label>
                                <input type="text" class="form-control required" placeholder="Серия" asp-for="@request.UserDocSeries">
                            </div>
                            <div class="col-4">
                                <label class="form-label" asp-for="@request.UserDocNumber">Номер</label>
                                <input type="text" class="form-control required" placeholder="Номер" asp-for="@request.UserDocNumber">
                            </div>
                        </div>
                        <div class="row mb-1">
                            <div class="col-12">
                                <label class="form-label" asp-for="@request.UserCitizenship">Гражданство</label>
                                <select class="form-select select2-nosearch required" asp-for="@request.UserCitizenship" data-dictionary='{"dictionary":"OksmCodes"}'>
                                </select>
                            </div>
                            <div class="col-12">
                                <label class="form-label" asp-for="@request.ApplicationAcceptance">Канал приема заявления</label>
                                <select class="form-select select2-nosearch required" asp-for="@request.ApplicationAcceptance">
                                    <option value="8">Заказное письмо</option>
                                    <option value="-1">Иной канал</option>
                                    <option value="9">Интеграционные шлюзы (API) ведомственных информационных систем</option>
                                    <option value="10">Исключительно для случаев, когда ЮЛ (заявитель) напрямую взаимодействует с ведомством через СМЭВ, например кредитные организации с ФССП</option>
                                    <option value="7">Кредитная организация</option>
                                    <option value="2" data-select2-id="54">Многофункциональный центр предоставления государственных и муниципальных услуг</option>
                                    <option value="11">Направление заявлений через электронную почту (если предусмотрено НПА)</option>
                                    <option value="5">Нотариус</option>
                                    <option value="6">Официальный сайт ведомства</option>
                                    <option value="4">Подразделение ведомства</option>
                                    <option value="3">Региональный портал государственных и муниципальных услуг</option>
                                </select>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade show" id="smev-request-tab3" role="tabpanel">
                <div class="row mb-2 justify-content-end">
                    <div class="col-12">
                        <button type="button" class="btn btn-outline-secondary buttons_height lh-1" onclick="getServiceDocuments()">
                            ОБНОВИТЬ
                        </button>
                        <button type="button" class="btn btn-outline-secondary buttons_height lh-1" data-upload-type="Desktop">
                            ЗАГР
                        </button>
                        <button type="button" class="btn btn-outline-secondary buttons_height lh-1" data-upload-type="Scan">
                            СКАН
                        </button>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-12">
                        <table id="attachmentsBlock" class="tabe table-hover table-striped" style="table-layout: fixed">
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-10" id="noDocuments" style="display:none">
                        <div class="alert alert-primary" role="alert">
                            <h6 class="alert-heading mb-1">Нет документов</h6>
                            <span>Добавьте файлы к услуге</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var applicants = @Json.Serialize(applicants);
    var formContent = document.getElementById("smev-data-form-content");
    var documentId;
    var smevForm = {
        init: () => {
            fileUploadInit($(formContent));
            getDictionaries();
            $('#smev_request').find('[type="text"]').each(function() {
                $(this).val('');
            });

            //$(formContent).find('.tab-pane').each(function() {
            //    new PerfectScrollbar($(this)[0], { useBothWheelAxes: false, suppressScrollX: true});
            //});

            //new Tagify(formContent.querySelector('[name$="PreviousNames"]'));

            $('#smev_request').find('.required').each(function() {
                addValidation($(this));
            });

            $('#smev_request').find("select.select2-nosearch").each(function() {
                $(this).select2({
                    dropdownParent: $("#mainModal"),
                    minimumResultsForSearch: Infinity
                });
            });
            $('#smev_request').find("select.select2").each(function() {
                $(this).select2({
                    placeholder: "ФИО",
                    tags: true,
                    minimumResultsForSearch: -1,
                    language: "ru",
                    allowClear: true,
                    showSearchBox: false
                });
            });
            $('#smev_request').find("select.select2-search").each(function() {
                $(this).select2({
                    dropdownParent: $("#mainModal")
                });
            });

            $(formContent).find('.snils').inputmask("999-999-999 99", {
                clearIncomplete: true,
                showMaskOnHover: false
            });

            $(formContent).find(".pickadate").datepicker({
                language: "ru",
                autoclose: true
            });

            var fileTypes;
            //$.ajax({
            //    url: '/SmevMvd/GiacAdmOffenceDrugsDocType',
            //    type: 'POST',
            //    async: false,
            //    data: { id: '@Model.SmevId' },
            //    success: function(items) {
            //        fileTypes = items;
            //    }
            //});

        }
    }
    getServiceDocuments();
    function getServiceDocuments() {
        $.ajax({
            url: '/Cases/ServiceDocumentsJson',
            type: "POST",
            async: false,
            data: { id: $('#ServiceId').val() },
            success: function(data) {
                $('#attachmentsBlock tbody').empty();
                documentId = data[0].id;
                let k = 0;
                data.forEach(doc =>
                    doc.files.forEach(file => {
                        k++;
                        let tr = $('<tr>');
                        tr.attr('data-attach', k - 1);
                        tr.append(`<td data-index>${k}</td>`);
                        tr.addClass('align-middle');
                        tr.append(`<td data-name>${file.name}${file.extension}</td>`);
                        tr.append(`<td style="width: 10%;">${(file.size / 1024).toFixed(2)} кБ</td>`);

                        let docTypes = $('<select>');
                        docTypes.addClass('form-select');
                        docTypes.append(`
                                         <option value="">Не выбрано</option>
                                         <option value="REWARD">Выданные гражданам документы о государственных и ведомственных наградах, государственных премиях и знаках отличия</option>
                                         <option value="MILITARY_REGISTRATION">Документ воинского учета (военный билет)</option>
                                         <option value="SOCIAL_ASSISTANCE_EXPENSES">Документ, подтверждающий сведения о расходах гражданина и членов его семьи и являющиеся основанием для назначения в отношении гражданина и его членов семьи субсидий и льгот, пенсий, пособий, за исключением сведений в соответствии с пунктом 35 статьи 6 Федерального закона "О государственной информационной системе жилищно-коммунального хозяйства</option>
                                         <option value="HISTORY_REGISTRATION_CERTIFICATE">Документ, содержащий исторические сведения о месте проживания гражданина до 2015 года включительно, в том числе содержащие информацию о гражданах, совместно проживающих и зарегистрированных в одном жилом помещении с таким гражданином</option>
                                         <option value="INCOME">Документы о заработке, доходе, денежном довольствии, содержании</option>
                                         <option value="SENIORITY">Документы о трудовой деятельности, трудовом стаже гражданина, а также документы, оформленные по результатам расследования несчастного случая на производстве либо профессионального заболевания, сведения в соответствии с которыми отсутствуют в распоряжении Пенсионного фонда Российской Федерации</option>
                                         <option value="SOCIAL_ASSISTANCE_ABROAD">Документы об инвалидности, выданные за пределами территории Российской Федерации</option>
                                         <option value="EDUCATION">Документы об образовании и (или) о квалификации, об ученых степенях и ученых званиях и документы, связанные с прохождением обучения, выданные в том числе на территории иностранного государства, и их нотариально удостоверенные переводы на русский язык</option>
                                         <option value="EDUCATION_MILITARY">Документы об образовании и (или) о квалификации, об ученых степенях и ученых званиях, выдаваемые военными профессиональными образовательными организациями и военными образовательными организациями высшего образования, а также выданные в 1992 - 1995 годах организациями, осуществляющими образовательную деятельность на территории Российской Федерации</option>
                                         <option value="CIVIL_PROCEEDINGS">Документы, выданные гражданам в ходе гражданского или административного судопроизводства либо судопроизводства в арбитражных судах, в том числе копии решений, приговоров, определений и постановлений судов общей юрисдикции и арбитражных судов</option>
                                         <option value="ELK_RESULT" selected="selected">Иные документы - результаты предоставления услуг, передаваемые в соответствии с Постановлением Правительства РФ от 1 марта 2022 г. № 277</option>
                                         <option value="MILITARY_HISTORY">Сведения о прохождении заявителем или членами его семьи военной службы по призыву в период, за который рассчитывается среднедушевой доход семьи или сведения о прохождении заявителем и (или) членами его семьи военной службы по призыву, а также о статусе военнослужащего, обучающегося в военной профессиональной организации и военной образовательной организации высшего образования и не заключившего контракт о прохождении военной службы</option>
                                         <option value="INCOME_MILITARY_HISTORY">Сведения о размере единовременного пособия при увольнении с военной службы, службы в учреждениях и органах уголовно-исполнительной системы Российской Федерации, органах федеральной службы безопасности, органах государственной охраны, органах внутренних дел Российской Федерации, таможенных органах Российской Федерации, войсках национальной гвардии Российской Федерации, органах принудительного исполнения Российской Федерации, Главном управлении специальных программ Президента Российской Федерации, а также из иных органов, в которых законодательством Российской Федерации предусмотрено прохождение федеральной государственной службы, связанной с правоохранительной деятельностью</option>
                                         <option value="EDUCATION_FULL_TIME">Сведения о факте обучения заявителя и (или) членов его семьи младше 23 лет в общеобразовательном учреждении либо образовательном учреждении среднего профессионального или высшего образования по очной форме обучения</option>
                                         <option value="EDUCATION_FULL_TIME_SC">Сведения о факте обучения заявителя или членов его семьи младше 23 лет в общеобразовательном учреждении либо образовательном учреждении среднего профессионального или высшего образования по очной форме обучения и неполучения стипендии в период, за который рассчитывается среднедушевой доход семьи</option>
                                         <option value="HOSPITAL_FULL_TIME">Сведения о факте прохождения заявителем или членами его семьи лечения длительностью свыше 3 месяцев, вследствие чего временно невозможно осуществлять трудовую деятельность, в период, за который рассчитывается среднедушевой доход семьи</option>
                                         <option value="FOREIGN_ZAGS">Свидетельство о государственной регистрации актов гражданского состояния, выданное компетентными органами иностранного государства, и (или) его нотариально удостоверенный перевод на русский язык</option>
                                         <option value="ADOPTION_CERTIFICATE">Свидетельство об усыновлении, выданное органами записи актов гражданского состояния или консульскими учреждениями Российской Федерации</option>
                                         <option value="MEDICAL">Справки, заключения и иные документы, выдаваемые медицинскими организациями, осуществляющими медицинскую деятельность и входящими в государственную, муниципальную или частную систему здравоохранения</option>
                                         <option value="SOCIAL_ASSISTANCE">Удостоверения и документы, подтверждающие право гражданина на получение социальной поддержки в соответствии с законодательством Российской Федерации</option>
                                         `);
                        tr.append(`<td style="width: 350px; max-width: 350px;">
                                       ${docTypes[0].outerHTML} </td>`);

                        tr.append(
                            `<td class="px-2" style="width: 1%;">
                                                       <i onclick="docRemove(this)" role="button" class='bx bx-trash'></i>
                                                 </td>`);
                        let trHide = $('<tr style="display: none;">');
                        trHide.append(`<td style="width: 5%;">
                                            <input disabled type="text" name="request.Attachments[${k - 1}].FileName" value="${file.id}">
                                        </td>`);
                        trHide.append(`<td style="width: 5%;">
                                            <input disabled type="text" name="request.Attachments[${k - 1}].IsFtpReference" value="true">
                                        </td>`);
                        trHide.append(`<td style="width: 5%;">
                                            <input disabled type="text" name="request.Attachments[${k - 1}].AttachmentTypeCode" value="">
                                        </td>`);

                        $('#attachmentsBlock').append(tr);
                        $('#attachmentsBlock').append(trHide);
                    }));

                $('#attachmentsBlock').find("select").each(function() {
                    $(this).on('change', function(event) {
                        let trHide = event.target.closest('tr').nextSibling;
                        $(trHide).find('[name$="AttachmentTypeCode"]').val(event.target.value);
                        switch (event.target.value) {
                            case '':
                                $(trHide).removeClass('active');
                                visibilityBlock($(trHide), true, true);
                                break;
                            default:
                                $(trHide).addClass('active');
                                visibilityBlock($(trHide), true, false);
                        }
                        $('#attachmentsBlock tr.active').each(function(index) {
                            renameBlock(this, index);
                        });
                    });

                    $(this).select2({
                        dropdownParent: $("#mainModal"),
                        minimumResultsForSearch: Infinity
                    });
                });

                if (data.length == 0) $(formContent).find('#noDocuments').show();

            }
        });
    }

    function addForm(cloneListId, originalId) { //Динамическое добавление Принимает (Куда Откуда)
        let cloneList = formContent.querySelector(`#${cloneListId}`);
        let original = formContent.querySelector(`#${originalId}`);
        let cloneBlock = original.cloneNode(true);
        cloneBlock.classList.remove('d-none');
        cloneBlock.removeAttribute('disabled');
        let index = cloneList.querySelectorAll('[data-clone]').length;
        renameBlock(cloneBlock, index);
        blockInit(cloneBlock);
        cloneList.appendChild(cloneBlock);
    }

    function blockRemove(el, cloneListId) {
        el.closest('[data-clone]').remove();
        formContent.querySelectorAll(`${cloneListId} [data-clone]`).forEach((item, index) => renameBlock(item, index));
    }

    function blockInit(block) {
        visibilityBlock($(block), false, false);
        $(block).find("select.select2-nosearch").each(function() {
            $(this).select2({
                dropdownParent: $("#mainModal"),
                minimumResultsForSearch: Infinity
            });
        });

        $(block).find("select.select2-search").each(function() {
            $(this).select2({
                dropdownParent: $("#mainModal")
            });
        });

        $(block).find("select").each(function() {
            if ($(this).data('def')) {
                $(this).val($(this).data('def')).trigger('change');
            } else {
                $(this).prop("selectedIndex", 0);
            }
        });
    }

    function renameBlock(cloneBlock, indexId, initOriginal = false) {
        console.log(indexId);
        if (!initOriginal) {
            cloneBlock.id = `clone${indexId}`;
            cloneBlock.dataset.id = indexId;
            cloneBlock.setAttribute('data-clone', '');
        }

        cloneBlock.querySelectorAll('input').forEach(item => {
            item.id = item.id.replace(/\d+/, indexId);
            item.name = item.name.replace(/\d+/, indexId);
        });

        cloneBlock.querySelectorAll('label').forEach(item => {
            item.setAttribute('for', item.getAttribute('for').replace(/\d+/, indexId));
        });

        cloneBlock.querySelectorAll('select').forEach(item => {
            item.id ? item.id = item.id.replace(/\d+/, indexId) : void 0;
            item.name ? item.name = item.name.replace(/\d+/, indexId) : void 0;
            item.hasAttribute('data-select2-id') ? item.removeAttribute('data-select2-id') : void 0;
        });
    }

    function ShowErrorInputs() {
        for (let item of document.querySelectorAll('#smev_request input')) {
            if (item.getAttribute('disabled') == null && item.classList.contains('required') && item.value == '') {
                $('#smev_request').find(`button[data-bs-target="#${item.closest('.tab-pane').id}"]`).trigger('click');
                break;
            }
        }
    }

    $('select.applicants').each(function() {
        $(this).on('change',
            function() {
                let id = $(this).val();
                let $block = $(this).closest('[data-person]');
                $block.find('[type="text"]').each(function() {
                    $(this).val('');
                });
                if (id) {
                    $block.find('[name$="LastName"]').val(applicants[id].lastName);
                    $block.find('[name$="FirstName"]').val(applicants[id].firstName);
                    $block.find('[name$="SecondName"]').val(applicants[id].secondName);


                    switch (applicants[id].documentTypeCode) {
                        case '21':
                            $block.find('[name$="UserDocType"]').val('1').trigger('change');

                            break;
                        case '3':
                            $block.find('[name$="UserDocType"]').val('21').trigger('change');

                            break;
                        case '22':
                            $block.find('[name$="UserDocType"]').val('3').trigger('change');
                            break;
                    }

                    $block.find('[name$="UserDocSeries"]').val(applicants[id].documentSerial.replace(' ', ''));
                    $block.find('[name$="UserDocNumber"]').val(applicants[id].documentNumber);
                    //  $block.find('[name$="DocIssueDate"]').val(applicants[id].documentIssueDate ? new Date(applicants[id].documentIssueDate).toLocaleDateString() : '');
                    // $block.find('[name$="DocIssuer"]').val(applicants[id].documentIssueBody);
                }
            });
    });

    function getDictionaries() {
        let dicts = new Set();
        $('[data-dictionary]').each(function() {
            let $this = $(this);
            let options = $this.data('dictionary');
            if (!dicts.has(options.dictionary)) {
                dicts.add(options.dictionary);
                $.post(`/SmevBase/SmevGetDictionary`,
                    {
                        type: options.dictionary
                    },
                    function(dictionary) {
                        fillSelect(options.dictionary, dictionary);
                    });
            }
        });
    };

    function fillSelect(dictName, dictionary) {
        $.each($(`[data-dictionary*='"${dictName}"']`),
            function() {
                let $this = $(this);
                let items = dictionary;
                $this.empty();
                if (!$this.hasClass('required')) {
                    $this.append(new Option('Выберите тип', ''));
                }
                if ($this.is('[data-value-value]')) {
                    items.dictionary.forEach(function(item) {
                        $this.append(new Option(item.value, item.value));
                    });
                } else {
                    items.dictionary.forEach(function(item) {
                        $this.append(new Option(item.value, item.key));
                    });
                }

                if (items.defaultKey != null) {
                    $this.val(items.defaultKey).trigger('update');
                    $this.attr('data-def', items.defaultKey);
                } else {
                    let defVal = $this.data('dictionary').default_value;
                    if (defVal) {
                        $this.val(defVal).trigger('update');
                        $this.attr('data-def', defVal);
                    }
                }

                // Костыль
                if (items.defaultKey == '400') {
                    $this.val('').trigger('update');
                }
            });
    }

    function visibilityBlock($block, hide, isDisabled) {
        switch (hide) {
            case true:
                if ($block.hasClass('accordion')) {
                    $block.find('.accordion-body').hide();
                } else {
                    $block.hide();
                }
                break;
            case false:
                if ($block.hasClass('accordion')) {
                    $block.find('.accordion-body').show();
                } else {
                    $block.show();
                }
                break;
        }

        switch (isDisabled) {
            case true:
                $block.find('input, select').each(function() {
                    if ($(this).attr('name') in SmevDataFormValidation.fields) {
                        removeValidation($(this));
                    }
                    $(this).prop('disabled', true);
                });
                break;
            case false:
                $block.find('input, select').each(function() {
                    $(this).prop('disabled', false);
                    if ($(this).hasClass('required')) {
                        addValidation($(this));
                    }
                });
                $block.find('[data-disabled]').each(function() {
                    visibilityBlock($(this), true, true);
                });
                break;
        }
    }

    function addValidation($el) {
        SmevDataFormValidation.addField($el.attr('name'),
            {
                validators: {
                    notEmpty: {}
                }
            });
        SmevDataFormValidation.elements[$el.attr('name')] = [$el[0]];
        $el.addClass('required');
    }

    function removeValidation($el) {
        if ($el.attr('name') in SmevDataFormValidation.fields) {
            SmevDataFormValidation.removeField($el.attr('name'));
        }
    }
    function renameAttach() {
        let indexActive = 0;
        $('#attachmentsBlock [data-attach]').each((index, item) => {
            $(item).attr('data-attach', index);
            $(item).find('[data-index]').html(index + 1);
            $(item).find('input[type="text"]').each(function() {
                $(this).attr('name', $(this).attr('name').replace(/\d+/, indexActive));
            });
            if ($(item).find('tr.active').length > 0) indexActive++;
        });
    }
    function docRemove(el) {
        el.closest('[data-attach]').remove();
        renameAttach();
    }
</script>