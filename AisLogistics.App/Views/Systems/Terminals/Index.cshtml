@model ViewModelBuilder
@{
    ViewBag.Title = Model.ViewTitle;
}

<!-- table -->
<div class="row directory_names" id="content-datatable">
    <div class="col-12">
        <div class="row justify-content-between align-items-center">
            <div class="col">
                @if (Model.IsVisibleDescription)
                {
                    <div class="b-s-14">@Model.ViewDescription</div>
                }
            </div>
            @if (User.HasClaim(AccessKeyNames.SystemTerminal, AccessKeyValues.Add))
            {
                <div class="col-auto text-md-end directory_search">
                    <button data-btn-params='{"actionType":"@ActionType.Add"}' data-btn-type="add" data-for-table="@Model.TableName" type="button" class="btn btn-primary">
                        <i class="bi bi-plus"></i> Добавить
                    </button>
                </div>
            }
        </div>

        <div class="table-responsive mt-3">
            <table asp-for="Model" asp-access-key-name="@AccessKeyNames.SystemTerminal" class="directory_names-items table"></table>
        </div>
    </div>
</div>

<!--/ table -->
@section Scripts
    {
    <script>
        const $table = $('#@(Model.TableName)'),
            isCanAdd = $table.is('[data-action-add]'),
            isCanEdit = $table.is('[data-action-edit]'),
            isCanRemove = $table.is('[data-action-remove]');

        $(document).ready(function () {
            $table.DataTable({
                sDom:
                    "<'row'<'col-sm-12'tr>>",
                processing: true,
                serverSide: true,
                filter: true,
                searchDelay: 1500,
                ajax: {
                    url: $table.data('action-table'),
                    type: "POST",
                    datatype: "json",
                    dataSrc: function (json) {
                        return json.data;
                    }
                },
                initComplete: function () {
                },
                columnDefs: [
                    {
                        data: "id",
                        targets: 0,
                        title: '',
                        visible: false,
                        orderable: false
                    },
                    {
                        targets: 1,
                        title: 'Наименование',
                        orderable: false
                    },
                    {
                        targets: 2,
                        title: 'Ip Адрес',
                        orderable: false
                    },
                    {
                        targets: 3,
                        title: 'Офис',
                        orderable: false
                    },
                    {
                        targets: -1,
                        title: 'Действия',
                        data: "id",
                        className: 'text-end editor-edit',
                        sorting: false,
                        orderable: false
                    }
                ],
                columns: [
                    {},
                    { data: "acquiringName" },
                    { data: "ipAddress" },
                    { data: "officeName" },
                    {
                        render: function (data, type, row) {
                            let content = "";
                            if (isCanEdit === true)
                                content += EditBtn({ "id": data, "actionType": 1 });
                            if (isCanRemove === true)
                                content += DeleteBtn({ "id": data });
                            return content;
                        }
                    }
                ]
            });
            $table.on("reload", () => {
                $table.DataTable().ajax.reload(null, false);
            });
            $table.on('draw.dt', function () {
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl, {
                        boundary: document.body
                    });
                });
            });
        });

        const EditBtn = (data) => {
            const params = JSON.stringify(data);
            return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="edit" data-bs-toggle="tooltip" title="Изменить" class="btn btn-sm btn-icon text-body">
                                    <i class="bi bi-pencil-square"></i></a>`;
        }
        const DeleteBtn = (data) => {
            const params = JSON.stringify(data);
            return `<a href="javascript:void(0);" data-btn-params='${params}' data-btn-type="remove" data-bs-toggle="tooltip" title="Удалить" class="btn btn-sm btn-icon text-danger">
                                    <i class="bi bi-trash"></i></a>`;
        }
    </script>
}

